#!/bin/bash

# Script para alternar entre vers√µes do firmware ESP32-CAM
# Vers√µes: INTELLIGENT (com compara√ß√£o) e SIMPLE (sem compara√ß√£o)

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Diret√≥rio do projeto
PROJECT_DIR="$(cd "$(dirname "$0")/.." && pwd)"
ESP32_MAIN_DIR="$PROJECT_DIR/src/firmware/main"

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}üîÑ Alternador de Vers√µes ESP32-CAM${NC}"
echo -e "${BLUE}Gabriel Passos - UNESP 2025${NC}"
echo -e "${BLUE}========================================${NC}"

# Verificar arquivo necess√°rio
if [ ! -f "$ESP32_MAIN_DIR/main_simple.c" ]; then
    echo -e "${RED}‚ùå Erro: Arquivo main_simple.c n√£o encontrado${NC}"
    echo -e "${RED}   Nota: main.c √© a vers√£o inteligente principal${NC}"
    exit 1
fi

# Detectar vers√£o atual
detect_current_version() {
    if [ -f "$ESP32_MAIN_DIR/ACTIVE_VERSION.txt" ]; then
        cat "$ESP32_MAIN_DIR/ACTIVE_VERSION.txt"
    else
        # main.c √© sempre a vers√£o inteligente (principal)
        if grep -q "calculate_stabilized_difference" "$ESP32_MAIN_DIR/main.c" 2>/dev/null; then
            echo "INTELLIGENT"
        else
            echo "SIMPLE"
        fi
    fi
}

CURRENT_VERSION=$(detect_current_version)

echo -e "${BLUE}üìã Status Atual:${NC}"
echo -e "   Vers√£o ativa: ${GREEN}$CURRENT_VERSION${NC}"

# Menu de op√ß√µes
echo -e "\n${YELLOW}üîÑ Escolha a vers√£o:${NC}"
echo -e "   ${GREEN}1)${NC} Vers√£o INTELIGENTE (detec√ß√£o robusta - PRINCIPAL)"
echo -e "   ${GREEN}2)${NC} Vers√£o SIMPLES (envia todas as imagens - para testes)"
echo -e "   ${GREEN}3)${NC} Ver diferen√ßas entre vers√µes"
echo -e "   ${GREEN}4)${NC} Status atual"
echo -e "   ${GREEN}0)${NC} Sair"

read -p "Escolha: " choice

case $choice in
    1)
        if [ "$CURRENT_VERSION" = "INTELLIGENT" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Vers√£o INTELIGENTE j√° est√° ativa${NC}"
        else
            echo -e "${YELLOW}üîÑ Restaurando vers√£o INTELIGENTE (principal)...${NC}"
            # Backup da vers√£o simples se estiver ativa
            if [ -f "$ESP32_MAIN_DIR/main.c" ]; then
                cp "$ESP32_MAIN_DIR/main.c" "$ESP32_MAIN_DIR/main_simple_backup.c"
            fi
            # Restaurar vers√£o inteligente original (se houver backup)
            if [ -f "$ESP32_MAIN_DIR/main_intelligent_backup.c" ]; then
                cp "$ESP32_MAIN_DIR/main_intelligent_backup.c" "$ESP32_MAIN_DIR/main.c"
            fi
            echo "INTELLIGENT" > "$ESP32_MAIN_DIR/ACTIVE_VERSION.txt"
            echo -e "${GREEN}‚úÖ Vers√£o INTELIGENTE restaurada${NC}"
            echo -e "${BLUE}üìã Caracter√≠sticas:${NC}"
            echo -e "   - Detec√ß√£o robusta com valida√ß√£o temporal"
            echo -e "   - Filtro de ru√≠do multi-camada"
            echo -e "   - Thresholds: 8% mudan√ßa | 15% alerta"
            echo -e "   - Economia de dados ~90%"
            echo -e "   - Sistema de refer√™ncia est√°tica"
        fi
        ;;
    2)
        if [ "$CURRENT_VERSION" = "SIMPLE" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Vers√£o SIMPLES j√° est√° ativa${NC}"
        else
            echo -e "${YELLOW}üîÑ Alternando para vers√£o SIMPLES...${NC}"
            # Backup da vers√£o inteligente principal
            cp "$ESP32_MAIN_DIR/main.c" "$ESP32_MAIN_DIR/main_intelligent_backup.c"
            # Ativar vers√£o simples
            cp "$ESP32_MAIN_DIR/main_simple.c" "$ESP32_MAIN_DIR/main.c"
            echo "SIMPLE" > "$ESP32_MAIN_DIR/ACTIVE_VERSION.txt"
            echo -e "${GREEN}‚úÖ Vers√£o SIMPLES ativada${NC}"
            echo -e "${BLUE}üìã Caracter√≠sticas:${NC}"
            echo -e "   - SEM compara√ß√£o de imagens"
            echo -e "   - Envia TODAS as fotos (100%)"
            echo -e "   - Menor uso de CPU"
            echo -e "   - Maior tr√°fego de rede"
            echo -e "   - Ideal para baseline de testes cient√≠ficos"
        fi
        ;;
    3)
        echo -e "\n${BLUE}üìä Diferen√ßas entre vers√µes:${NC}"
        echo -e "\n${GREEN}INTELIGENTE (PRINCIPAL):${NC}"
        echo -e "   ‚úÖ Algoritmo de detec√ß√£o robusta RGB565"
        echo -e "   ‚úÖ An√°lise por blocos 32x32 otimizados"
        echo -e "   ‚úÖ Valida√ß√£o temporal com 3 frames consecutivos"
        echo -e "   ‚úÖ Filtro de ru√≠do multi-camada"
        echo -e "   ‚úÖ Refer√™ncia est√°tica para estabilidade"
        echo -e "   ‚úÖ Suaviza√ß√£o IIR contra picos isolados"
        echo -e "   üìä Uso de dados: ~1.2-1.8 KB/s (otimizado)"
        
        echo -e "\n${YELLOW}SIMPLES:${NC}"
        echo -e "   ‚ùå Sem compara√ß√£o"
        echo -e "   ‚ùå Sem an√°lise"
        echo -e "   ‚úÖ Implementa√ß√£o direta"
        echo -e "   ‚úÖ Menor complexidade"
        echo -e "   üìä Uso de dados: ~5-10 KB/s"
        ;;
    4)
        echo -e "\n${BLUE}üìã Status detalhado:${NC}"
        echo -e "   Vers√£o ativa: ${GREEN}$CURRENT_VERSION${NC}"
        echo -e "   Arquivo main.c: $(ls -lh $ESP32_MAIN_DIR/main.c | awk '{print $5}')"
        echo -e "   √öltima modifica√ß√£o: $(date -r $ESP32_MAIN_DIR/main.c '+%d/%m/%Y %H:%M:%S')"
        ;;
    0)
        echo -e "${GREEN}üëã Saindo...${NC}"
        exit 0
        ;;
    *)
        echo -e "${RED}‚ùå Op√ß√£o inv√°lida${NC}"
        exit 1
        ;;
esac

echo -e "\n${GREEN}üöÄ Pr√≥ximos passos:${NC}"
echo -e "   1. Compile: ${YELLOW}cd esp32 && idf.py build${NC}"
echo -e "   2. Flash: ${YELLOW}idf.py flash monitor${NC}"
echo -e "   3. Execute testes comparativos"

echo -e "\n${BLUE}========================================${NC}"
echo -e "${GREEN}‚úÖ Opera√ß√£o conclu√≠da!${NC}"
echo -e "${BLUE}========================================${NC}" 