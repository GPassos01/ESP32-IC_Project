#!/bin/bash

# Script de Configura√ß√£o - Sistema de Monitoramento de Enchentes ESP32
# Projeto IC - Gabriel Passos de Oliveira - IGCE/UNESP - 2024

echo "======================================================"
echo "Sistema de Monitoramento de Enchentes - ESP32"
echo "Projeto de Inicia√ß√£o Cient√≠fica - IGCE/UNESP"
echo "======================================================"

# Verificar se ESP-IDF est√° instalado
if ! command -v idf.py &> /dev/null; then
    echo "‚ùå ESP-IDF n√£o encontrado!"
    echo "Por favor, instale o ESP-IDF v4.4+ antes de continuar."
    echo "Instru√ß√µes: https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/"
    exit 1
fi

echo "‚úÖ ESP-IDF encontrado: $(idf.py --version)"

# Fun√ß√£o para configurar projeto
setup_project() {
    echo ""
    echo "üîß Configurando projeto ESP32..."
    
    # Definir target para ESP32
    idf.py set-target esp32
    
    # Configurar parti√ß√µes customizadas
    echo "üì¶ Configurando parti√ß√µes..."
    
    # Verificar se menuconfig √© necess√°rio
    read -p "Deseja abrir o menu de configura√ß√£o? (y/n): " config_menu
    if [[ $config_menu == "y" || $config_menu == "Y" ]]; then
        idf.py menuconfig
    fi
    
    echo "‚úÖ Configura√ß√£o conclu√≠da!"
}

# Fun√ß√£o para compilar projeto
build_project() {
    echo ""
    echo "üî® Compilando projeto..."
    
    if idf.py build; then
        echo "‚úÖ Compila√ß√£o bem-sucedida!"
        return 0
    else
        echo "‚ùå Erro na compila√ß√£o!"
        return 1
    fi
}

# Fun√ß√£o para fazer flash
flash_project() {
    echo ""
    echo "üì± Detectando porta ESP32..."
    
    # Tentar detectar porta automaticamente
    if [[ -e /dev/ttyUSB0 ]]; then
        port="/dev/ttyUSB0"
    elif [[ -e /dev/ttyACM0 ]]; then
        port="/dev/ttyACM0"
    else
        read -p "Digite a porta da ESP32 (ex: /dev/ttyUSB0): " port
    fi
    
    echo "üî• Fazendo flash na porta $port..."
    
    if idf.py -p $port flash; then
        echo "‚úÖ Flash bem-sucedido!"
        
        read -p "Deseja abrir o monitor serial? (y/n): " open_monitor
        if [[ $open_monitor == "y" || $open_monitor == "Y" ]]; then
            echo "üì∫ Abrindo monitor serial (Ctrl+] para sair)..."
            idf.py -p $port monitor
        fi
    else
        echo "‚ùå Erro no flash!"
        return 1
    fi
}

# Fun√ß√£o para configurar ambiente Python
setup_python() {
    echo ""
    echo "üêç Configurando ambiente Python para monitor MQTT..."
    
    # Verificar se Python est√° instalado
    if ! command -v python3 &> /dev/null; then
        echo "‚ùå Python3 n√£o encontrado!"
        echo "Por favor, instale Python3 antes de continuar."
        return 1
    fi
    
    echo "‚úÖ Python encontrado: $(python3 --version)"
    
    # Criar ambiente virtual se n√£o existir
    if [[ ! -d "venv" ]]; then
        echo "üì¶ Criando ambiente virtual..."
        python3 -m venv venv
    fi
    
    # Ativar ambiente virtual
    echo "üîÑ Ativando ambiente virtual..."
    source venv/bin/activate
    
    # Instalar depend√™ncias
    echo "üì• Instalando depend√™ncias Python..."
    pip install -r requirements.txt
    
    echo "‚úÖ Ambiente Python configurado!"
    echo "Para ativar o ambiente virtual manualmente: source venv/bin/activate"
}

# Fun√ß√£o para verificar configura√ß√µes
check_config() {
    echo ""
    echo "üîç Verificando configura√ß√µes..."
    
    # Verificar se as configura√ß√µes foram alteradas
    if grep -q "SEU_WIFI_SSID" main/main.c; then
        echo "‚ö†Ô∏è  ATEN√á√ÉO: Configure o WiFi em main/main.c"
        echo "   - WIFI_SSID"
        echo "   - WIFI_PASS"
        echo "   - MQTT_BROKER_URI"
    fi
    
    if grep -q "SEU_BROKER_MQTT" monitor_mqtt.py; then
        echo "‚ö†Ô∏è  ATEN√á√ÉO: Configure o MQTT em monitor_mqtt.py"
        echo "   - MQTT_BROKER"
        echo "   - MQTT_USERNAME"
        echo "   - MQTT_PASSWORD"
    fi
    
    # Verificar se arquivos essenciais existem
    files=("main/main.c" "CMakeLists.txt" "sdkconfig.defaults" "partitions.csv")
    for file in "${files[@]}"; do
        if [[ -f "$file" ]]; then
            echo "‚úÖ $file"
        else
            echo "‚ùå $file n√£o encontrado!"
        fi
    done
}

# Menu principal
main_menu() {
    while true; do
        echo ""
        echo "======================================================"
        echo "MENU PRINCIPAL"
        echo "======================================================"
        echo "1) Configurar projeto ESP32"
        echo "2) Compilar projeto"
        echo "3) Fazer flash na ESP32"
        echo "4) Configurar ambiente Python"
        echo "5) Verificar configura√ß√µes"
        echo "6) Compilar e fazer flash (completo)"
        echo "7) Sair"
        echo ""
        read -p "Escolha uma op√ß√£o (1-7): " choice
        
        case $choice in
            1)
                setup_project
                ;;
            2)
                build_project
                ;;
            3)
                flash_project
                ;;
            4)
                setup_python
                ;;
            5)
                check_config
                ;;
            6)
                setup_project
                if build_project; then
                    flash_project
                fi
                ;;
            7)
                echo "üëã Saindo..."
                exit 0
                ;;
            *)
                echo "‚ùå Op√ß√£o inv√°lida!"
                ;;
        esac
    done
}

# Verificar se estamos no diret√≥rio correto
if [[ ! -f "main/main.c" ]]; then
    echo "‚ùå Execute este script a partir do diret√≥rio raiz do projeto!"
    exit 1
fi

# Verificar configura√ß√µes iniciais
check_config

# Iniciar menu principal
main_menu 