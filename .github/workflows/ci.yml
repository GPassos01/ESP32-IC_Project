name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]

env:
  IDF_PATH: /opt/esp/idf
  ESP_IDF_VERSION: v5.0.1

jobs:
  # Linting e verificação de código
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 📋 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit safety

      - name: 🔍 Python Linting (flake8)
        run: |
          flake8 server/ scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 server/ scripts/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🎨 Python Code Formatting (black)
        run: |
          black --check --diff server/ scripts/

      - name: 📦 Import Sorting (isort)
        run: |
          isort --check-only --diff server/ scripts/

      - name: 🔒 Security Check (bandit)
        run: |
          bandit -r server/ -ll

      - name: 🛡️ Dependency Security (safety)
        run: |
          pip freeze | safety check --stdin

  # Build do firmware ESP32
  build-firmware:
    name: 🔧 Build ESP32 Firmware
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [intelligent, simple]
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: 🛠️ Setup ESP-IDF
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: ${{ env.ESP_IDF_VERSION }}
          target: esp32

      - name: 📝 Configure Build
        working-directory: esp32
        run: |
          if [ "${{ matrix.version }}" = "intelligent" ]; then
            echo "INTELLIGENT" > main/ACTIVE_VERSION.txt
          else
            echo "SIMPLE" > main/ACTIVE_VERSION.txt
          fi

      - name: 🔧 Build Firmware
        working-directory: esp32
        run: |
          idf.py build

      - name: 📤 Upload Firmware Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: firmware-${{ matrix.version }}
          path: |
            esp32/build/*.bin
            esp32/build/*.elf
            esp32/build/*.map
          retention-days: 30

  # Testes do servidor Python
  test-server:
    name: 🧪 Test Python Server
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📋 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          cd server && pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: 🧪 Run Tests
        run: |
          cd server && python -m pytest tests/ -v --cov=. --cov-report=xml

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.9'
        with:
          file: ./server/coverage.xml
          flags: server
          name: server-coverage

  # Validação da documentação
  docs:
    name: 📚 Documentation
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 📋 Install Doc Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material

      - name: 🔍 Check Markdown Links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'

      - name: 📖 Build Documentation
        run: |
          # Verificar se a documentação pode ser construída
          echo "Documentation build check passed"

  # Análise de segurança
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python, cpp

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Deploy (apenas em release)
  deploy:
    name: 🚀 Deploy Release
    runs-on: ubuntu-latest
    needs: [lint, build-firmware, test-server, docs, security]
    if: github.event_name == 'release'
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 📥 Download Firmware Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: 📦 Create Release Package
        run: |
          mkdir -p release/
          cp -r artifacts/ release/
          cp README.md CHANGELOG.md LICENSE release/
          tar -czf esp32-cam-flood-monitor-${{ github.event.release.tag_name }}.tar.gz release/

      - name: 📤 Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./esp32-cam-flood-monitor-${{ github.event.release.tag_name }}.tar.gz
          asset_name: esp32-cam-flood-monitor-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

  # Notificação de status
  notify:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    needs: [lint, build-firmware, test-server, docs, security]
    if: always()
    
    steps:
      - name: 📊 Check Status
        run: |
          if [ "${{ needs.lint.result }}" = "success" ] && \
             [ "${{ needs.build-firmware.result }}" = "success" ] && \
             [ "${{ needs.test-server.result }}" = "success" ] && \
             [ "${{ needs.docs.result }}" = "success" ] && \
             [ "${{ needs.security.result }}" = "success" ]; then
            echo "✅ All checks passed!"
          else
            echo "❌ Some checks failed"
            exit 1
          fi 