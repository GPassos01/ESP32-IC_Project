name: CI/CD ESP32-CAM Flood Monitor

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]

env:
  ESP_IDF_VERSION: v5.2.5
  PYTHON_VERSION: 3.9

jobs:
  # ===============================================
  # ESP32 Firmware Build and Test
  # ===============================================
  firmware-build:
    name: ESP32 Firmware Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        version: [intelligent, simple]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup ESP-IDF
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: ${{ env.ESP_IDF_VERSION }}
        target: esp32
    
    - name: Build Firmware (${{ matrix.version }})
      working-directory: src/firmware
      run: |
        # Configure version
        echo "${{ matrix.version }}" | tr '[:lower:]' '[:upper:]' > main/ACTIVE_VERSION.txt
        
        # Build
        idf.py build
        
        # Check build artifacts
        ls -la build/
        test -f build/esp32_cam_monitor.bin
    
    - name: Upload Firmware Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ matrix.version }}
        path: |
          src/firmware/build/*.bin
          src/firmware/build/*.elf
          src/firmware/build/bootloader/bootloader.bin
          src/firmware/build/partition_table/partition-table.bin
        retention-days: 30

  # ===============================================
  # Python Server Test
  # ===============================================
  server-test:
    name: Python Server Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Dependencies
      working-directory: src/server
      run: |
        python -m pip install --upgrade pip
        pip install paho-mqtt matplotlib numpy scipy pillow pytest
        pip install -r requirements.txt || echo "requirements.txt not found"
    
    - name: Run Server Tests
      working-directory: src/server
      run: |
        # Basic import test
        python -c "import mqtt_data_collector; print('Import successful')"
        
        # Help test
        python mqtt_data_collector.py --help
        
        # Syntax check
        python -m py_compile mqtt_data_collector.py
    
    - name: Test Data Directory Structure
      run: |
        mkdir -p data/{images/{intelligent,simple},databases,reports}
        python -c "
        import os
        required_dirs = ['data/images/intelligent', 'data/images/simple', 'data/databases']
        for dir_path in required_dirs:
            assert os.path.exists(dir_path), f'Missing: {dir_path}'
        print('Data structure OK')
        "

  # ===============================================
  # Documentation Check
  # ===============================================
  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check Required Files
      run: |
        required_files=(
          "README.md"
          "CHANGELOG.md" 
          "CONTRIBUTING.md"
          "LICENSE"
          "CODE_OF_CONDUCT.md"
          "SECURITY.md"
          "SUPPORT.md"
        )
        
        for file in "${required_files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "$file exists"
          else
            echo "$file missing"
            exit 1
          fi
        done
    
    - name: Check README structure
      run: |
        # Check if README has key sections
        required_sections=(
          "Sobre o Projeto"
          "Funcionalidades"
          "Instalação"
          "Uso"
          "Contribuir"
        )
        
        for section in "${required_sections[@]}"; do
          if grep -q "$section" README.md; then
            echo "Section '$section' found"
          else
            echo "Section '$section' not found"
          fi
        done

  # ===============================================
  # Tools Validation (Beta)
  # ===============================================
  tools-validation:
    name: Tools Validation (Beta)
    runs-on: ubuntu-latest
    continue-on-error: true  # Beta tools may fail
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check Tools Structure
      run: |
        echo "Validating tools structure..."
        
        tools_dirs=(
          "tools/build"
          "tools/development" 
          "tools/deployment"
          "tools/analysis"
        )
        
        for dir in "${tools_dirs[@]}"; do
          if [[ -d "$dir" ]]; then
            echo "$dir exists"
            ls -la "$dir"
          else
            echo "$dir missing"
          fi
        done
    
    - name: Test Tools Syntax
      run: |
        echo "Checking shell scripts syntax..."
        
        find tools/ -name "*.sh" -type f | while read script; do
          echo "Checking $script..."
          bash -n "$script" && echo "$script syntax OK" || echo "$script has syntax errors"
        done

  # ===============================================
  # Security Scan
  # ===============================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Secret Scan
      run: |
        echo "Scanning for secrets..."
        
        # Check for common secret patterns
        if grep -r -i "password\s*=" src/ || \
           grep -r -i "secret\s*=" src/ || \
           grep -r -i "api[_-]key" src/; then
          echo "Potential secrets found"
          exit 1
        else
          echo "No obvious secrets found"
        fi
    
    - name: License Check
      run: |
        if [[ -f "LICENSE" ]]; then
          echo "License file exists"
          head -n 5 LICENSE
        else
          echo "No license file found"
          exit 1
        fi

  # ===============================================
  # Notification
  # ===============================================
  notify:
    name: Build Status Notification
    runs-on: ubuntu-latest
    needs: [server-test, documentation, tools-validation, security-scan]
    if: always()
    
    steps:
    - name: Build Status Summary
      run: |
        echo "Build Status Summary:"
        echo "Server Test: ${{ needs.server-test.result }}" 
        echo "Documentation: ${{ needs.documentation.result }}"
        echo "Tools Validation: ${{ needs.tools-validation.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.server-test.result }}" == "success" && 
              "${{ needs.documentation.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "Core checks passed!"
        else
          echo "Some checks failed"
          exit 1
        fi 